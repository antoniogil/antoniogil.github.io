{"version":3,"sources":["config.js","components/advice/Advice.js","services/AdviceService.js","components/clock/Clock.js","components/grettings/Grettings.js","components/references/ReferenceItem.js","components/references/ReferenceList.js","App.js","registerServiceWorker.js","index.js"],"names":["dictionary","chuck","norris","CHUCK","NORRIS","Chuck","Norris","baseUrl","adviceService","this","advice","url","fetch","then","res","status","Error","json","data","replaceText","value","stringChange","forEach","item","name","Object","keys","replace","RegExp","getData","a","get","loading","visible","imgRandom","defaultData","Advice","useState","dataSet","useEffect","reloadData","resultData","className","show","toString","src","Date","now","alt","disabled","onClick","Clock","getTime","moment","format","clock","setClock","setInterval","Grettings","hour","getGrettingsPhrase","ReferenceItem","title","target","rel","href","ReferenceList","hrefs","setHrefs","firebase","database","ref","child","on","val","filter","x","map","idx","key","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1cae1f0c.chunk.js","sourcesContent":["export const dictionary = [\r\n  { chuck: \"antonio\" },\r\n  { norris: \"gil\" },\r\n  { CHUCK: \"ANTONIO\" },\r\n  { NORRIS: \"GIL\" },\r\n  { Chuck: \"Antonio\" },\r\n  { Norris: \"Gil\" }\r\n];\r\n\r\nexport const baseUrl = {\r\n  chuck: \"https://api.chucknorris.io/jokes/random\",\r\n  avatar: \"https://placeimg.com/60/60/people\"\r\n};","import React, { useEffect, useState } from \"react\";\r\nimport { AdviceService } from \"../../services\";\r\nimport { baseUrl } from \"../../config\";\r\n\r\nconst adviceService = new AdviceService();\r\n\r\nconst getData = async () => {\r\n  const { advice } = await adviceService.get();\r\n  return {\r\n    loading: false,\r\n    advice,\r\n    visible: true,\r\n    imgRandom: baseUrl.avatar,\r\n  };\r\n};\r\n\r\nconst defaultData = () => {\r\n  return {\r\n    loading: true,\r\n    advice: \"\",\r\n    visible: false,\r\n    imgRandom: baseUrl.avatar,\r\n  };\r\n};\r\n\r\nfunction Advice() {\r\n  const [data, dataSet] = useState(defaultData);\r\n\r\n  useEffect(async () => {\r\n    reloadData();\r\n  }, []);\r\n\r\n  const reloadData = async () => {\r\n    const resultData = await getData();\r\n    dataSet(resultData);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Code\" show={data.visible.toString()}>\r\n      <div className=\"advice\">\r\n        {data.visible ? (\r\n          <div className=\"icon\">\r\n            <img\r\n              src={baseUrl.avatar + `?t=${Date.now()}`}\r\n              alt=\"chuck-icon\"\r\n              className=\"iconImg\"\r\n            />\r\n          </div>\r\n        ) : null}\r\n        <div className=\"phrase\">\r\n          <h1>{data.advice}</h1>\r\n        </div>\r\n      </div>\r\n      <span\r\n        disabled={data.loading}\r\n        onClick={reloadData}\r\n        className=\"material-icons\"\r\n      >\r\n        autorenew\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Advice;\r\n","\r\nimport { dictionary, baseUrl } from \"../config.js\";\r\n\r\nclass AdviceService {\r\n  constructor() {\r\n    this.advice = \"\";\r\n    this.url = baseUrl.chuck;\r\n  }\r\n\r\n  get() {\r\n    return fetch(this.url)\r\n      .then(res => {\r\n        if (res.status >= 400) {\r\n          throw new Error(\"Bad repsonse from server\");\r\n        }\r\n        return res.json();\r\n      })\r\n      .then(data => {\r\n        const advice = this.replaceText(data.value);\r\n        return {\r\n          advice\r\n        };\r\n      });\r\n  }\r\n\r\n  replaceText (value) {\r\n    let stringChange = value;\r\n    dictionary.forEach(item => {\r\n      const name = Object.keys(item)[0];\r\n      const value = item[name];\r\n      stringChange = stringChange.replace(new RegExp(name, \"g\"), value);\r\n    });\r\n    return stringChange;\r\n  }\r\n}\r\n\r\nexport default AdviceService;\r\n","import React, { useEffect, useState } from 'react'\r\nimport * as moment from 'moment'\r\n\r\nconst Clock = () => {\r\n  const getTime = () =>  moment().format('HH:mm:ss');\r\n\r\n  const [clock, setClock]=useState(getTime);\r\n\r\n  useEffect(() => {\r\n    setInterval(() => setClock(getTime), 1000);\r\n  }, []);\r\n\r\n  return (<div className=\"Clock\"><h1>{clock}</h1></div>)\r\n\r\n}\r\n\r\nexport default Clock","import React from 'react'\r\nimport * as moment from 'moment'\r\n\r\nconst Grettings = () => {\r\n\r\nconst getGrettingsPhrase = () => {\r\n  const hour = moment().hour();\r\n  switch (true) {\r\n    case hour < 7:\r\n      return \"Acuestate\"\r\n    case hour < 12:\r\n      return \"Buenos días\"\r\n    case hour < 15:\r\n      return \"Tómate una cervecita\"\r\n    case hour < 20:\r\n      return \"Buenas tardes\"\r\n    case hour < 23:\r\n      return \"Buenas noches\"\r\n    default:\r\n      return \"Buenos días\"\r\n  }\r\n}\r\n\r\n  return (\r\n    <div className=\"Grettings\">\r\n      <h1>{getGrettingsPhrase()} Antonio!</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Grettings","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ReferenceItem = ({ title, url }) => {\r\n  return (\r\n    <a\r\n      className=\"ReferenceItem\"\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n      href={url}\r\n    >\r\n      {title}\r\n    </a>\r\n  );\r\n};\r\n\r\nReferenceItem.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  url: PropTypes.string.isRequired\r\n}\r\n\r\nexport default ReferenceItem;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nimport ReferenceItem from \"./ReferenceItem\";\r\n\r\nconst ReferenceList = () => {\r\n\r\n  const [hrefs, setHrefs] = useState([]);\r\n  useEffect(() => {\r\n    let hrefs = [];\r\n    const hrefsRef = firebase.database().ref().child(\"favs\");\r\n    hrefsRef.on(\"value\", (data) => { \r\n      hrefs = data.val().filter((x) => x.visible)\r\n      setHrefs(hrefs);\r\n    });\r\n\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"ReferenceList\">\r\n      {hrefs &&\r\n        hrefs.map((item, idx) => (\r\n          <ReferenceItem url={item.url} key={idx} title={item.title} />\r\n        ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReferenceList;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport { Grettings, Clock, Advice, ReferenceList } from \"./components\";\r\n\r\nconst App = () => (\r\n  <div className=\"App\">\r\n    <Grettings />\r\n    <Clock />\r\n    <Advice />\r\n    <ReferenceList />\r\n  </div>\r\n);\r\n\r\nexport default App;\r\n\r\n// WEBPACK FOOTER //\r\n// ./src/App.js\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\n    // Initialize Firebase\r\n    firebase.initializeApp({\r\n      apiKey: \"AIzaSyALbqCkT5mVINagyKse7-OIjd4tInXdgN4\",\r\n      authDomain: \"favoritespages-24d3d.firebaseapp.com\",\r\n      databaseURL: \"https://favoritespages-24d3d.firebaseio.com\",\r\n      projectId: \"favoritespages-24d3d\",\r\n      storageBucket: \"\",\r\n      messagingSenderId: \"586463760497\"\r\n    });\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}